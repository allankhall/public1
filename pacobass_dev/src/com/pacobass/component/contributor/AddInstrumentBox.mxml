<?xml version="1.0" encoding="utf-8"?>

	<mx:VBox 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:fx="http://ns.adobe.com/mxml/2009" 
		width="100%" height="100%"
		
		creationComplete = "init()"  hide="Alert.show('lll')" >
	<fx:Metadata>
		[Event(name="instrumentHelper", type = "com.pacobass.event.InstrumentHelperEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.pacobass.event.InstrumentHelperEvent;
			import com.pacobass.util.Constant;
			
			import mx.controls.Alert;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			private var serialvalidator:Validator;
			
			/**
			 * setup validators and valid fields bools
			 * @private
			 */
			private function init():void{
				serialvalidator = new Validator();
				serialvalidator.required = true;
				serialvalidator.source = serialInput;
				serialvalidator.property = "text";
				serialvalidator.requiredFieldError = "a serial is required, if no serial exists enter 0";
			}
			
			/**
			 * valdate all fields and set submit buton
			 * @private
			 */
			private function enableSubmit():void{
				addButton.enabled = (serialvalidator.validate().type == ValidationResultEvent.VALID)	
			}
			
			/**
			 * reset form and send cancel event to parent
			 * @private
			 */
			private function cancel(button:String):void{
				resetForm();
				dispatchEvent(new InstrumentHelperEvent(button));
			}
			
			
			/**
			 * null fields and error strings
			 * @private
			 */
			public function resetForm():void{
				nicknameInput.text = "";
				serialInput.text = "";
				longDesrInput.text = "";
				addButton.enabled = false;
			}
			
			/**
			 * alert on error from service call
			 * @private
			 */
			private function onError(err:FaultEvent):void {
				Alert.show(Constant.GENERAL_ERROR);
			}
			
			
			 /* if user exists get the information
			 * otherwise reset password field.
			 * @private
			 * @param username:ResultEvent			
			 */
			private function onAddInstrumentResult(evt:ResultEvent):void {
				if(evt.result){
					//if added then reset and list
					resetForm();
					dispatchEvent(new InstrumentHelperEvent(Constant.CANCEL_LINK));
				}else{
					Alert.show(Constant.ADD_INSTR_ERROR);
				}	
			}
			
			/**
			 * check to see if user is already registered
			 * @private
			 */
			private function addInstrument():void{
				try{
					zendAMF.addInstrument(serialInput.text, nicknameInput.text, longDesrInput.text);
				}catch(e:TypeError){	
				}
			}	
		]]>
	</fx:Script>
		<fx:Declarations>
			<mx:RemoteObject 
				id="zendAMF" 
				destination="zend" 
				showBusyCursor="true" 
				source="instrument_functions">
				<mx:method 
					name="addInstrument" 
					result="onAddInstrumentResult(event)"  
					fault="onError(event)">
					<mx:arguments>
						<nickname>
							{null}
						</nickname>
						<serial>
							{null}
						</serial>
						<description>
							{null}
						</description>
					</mx:arguments>
				</mx:method>
			</mx:RemoteObject>
		</fx:Declarations>
	<mx:Label text = "ADD INSTRUMENT" />
	<mx:Form id="addInstrumentForm">
		<mx:FormItem label = "nickname : ">
			<mx:TextInput 
					id="nicknameInput" />
		</mx:FormItem>
		<mx:FormItem label = "serial : ">
			<mx:TextInput 
					id="serialInput" 
					change = "enableSubmit()"/>
		</mx:FormItem>
		<mx:FormItem label = "decsription : ">
			<mx:TextArea
					height = "88"
					id="longDesrInput"/>
		</mx:FormItem>
	</mx:Form>
	<mx:HBox>
		<mx:Button 
				id = "addButton" 
				label="add"
				enabled = "false"
				click = 'addInstrument()' />
		<mx:Button
				id = "cancelButton"
				label = "cancel" 
				click = 'cancel(Constant.CANCEL_LINK)'
		/>
	</mx:HBox>
</mx:VBox>
