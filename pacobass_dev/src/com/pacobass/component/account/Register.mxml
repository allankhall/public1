<?xml version="1.0" encoding="utf-8"?>
<mx:VBox 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	height = "500" width = "400"
		creationComplete = "init()" hide ="resetForm()" show = "resetForm()">
	<fx:Metadata>
		[Event(name="registerHelper", type = "com.pacobass.event.RegisterHelperEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.pacobass.event.LoginHelperEvent;
			import com.pacobass.event.RegisterHelperEvent;
			import com.pacobass.util.Constant;
		
			import mx.controls.Alert;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.EmailValidator;
			import mx.validators.StringValidator;
			
			//validators
			private var usernameValidator:StringValidator;
			private var firstNameValidator:StringValidator;
			private var lastNameValidator:StringValidator;
			private var passwordValidator:StringValidator;
			private var mailValidator:EmailValidator;
			
			//field valid bools
			private var usernameValid:Boolean;
			private var firstNameValid:Boolean;
			private var lastNameValid:Boolean;
			private var emailValid:Boolean;
			private var passwordValid:Boolean;
			private var passwordMatchBool:Boolean;
			
			
			
			/**
			 * setup validators and valid fields bools
			 * @private
			 */
			private function init():void{
				usernameValidator = new StringValidator();
				usernameValidator.source = usernameInput;
				usernameValidator.required = true;
				usernameValidator.property="text";
				usernameValidator.minLength = Constant.USERNAME_MIN_LENGTH;
				usernameValidator.maxLength = Constant.USERNAME_MAX_LENGTH;
				usernameValidator.tooShortError = Constant.USERNAME_SHORT_ERROR;
				usernameValidator.tooLongError = Constant.USERNAME_LONG_ERROR;
				
				firstNameValidator = new StringValidator();
				firstNameValidator.source = firstNameInput;
				firstNameValidator.required = true;
				firstNameValidator.property = "text";
				firstNameValidator.minLength = Constant.FIRST_NAME_MIN_LENGTH;
				firstNameValidator.maxLength = Constant.FIRST_NAME_MAX_LENGTH;
				firstNameValidator.tooShortError = Constant.FIRST_NAME_SHORT_ERROR;
				firstNameValidator.tooLongError = Constant.FIRST_NAME_LONG_ERROR;
				
				lastNameValidator = new StringValidator();
				lastNameValidator.source = lastNameInput;
				lastNameValidator.required = false;
				lastNameValidator.property = "text";
				lastNameValidator.minLength = Constant.LAST_NAME_MIN_LENGTH;
				lastNameValidator.maxLength = Constant.LAST_NAME_MAX_LENGTH;
				lastNameValidator.tooShortError = Constant.LAST_NAME_SHORT_ERROR;
				lastNameValidator.tooLongError = Constant.LAST_NAME_LONG_ERROR;
				
				passwordValidator = new StringValidator();
				passwordValidator.source = passwordInput;
				passwordValidator.required = true;
				passwordValidator.property = "text";
				passwordValidator.minLength = Constant.PASSWORD_MIN_LENGTH;
				passwordValidator.maxLength = Constant.PASSWORD_MAX_LENGTH;
				passwordValidator.tooShortError = Constant.PASSWORD_SHORT_ERROR;
				passwordValidator.tooLongError = Constant.PASSWORD_LONG_ERROR;
				
				mailValidator = new EmailValidator();
				mailValidator.source = emailInput;
				mailValidator.property = "text";
				
				usernameValid = new Boolean();
				firstNameValid = new Boolean();
				lastNameValid = new Boolean();
				passwordValid = new Boolean();
				passwordMatchBool = new Boolean();
				emailValid = new Boolean();
				
			}
			
			/**
			 * valdate all fields and set submit buton
			 * @private
			 */
			private function enableSubmit():void{
				registerButton.enabled = false;
				usernameValid = (usernameValidator.validate().type == ValidationResultEvent.VALID);
				firstNameValid = (firstNameValidator.validate().type == ValidationResultEvent.VALID);
				lastNameValid = (lastNameValidator.validate().type == ValidationResultEvent.VALID);
				passwordValid = (passwordValidator.validate().type == ValidationResultEvent.VALID);
				emailValid = (mailValidator.validate().type == ValidationResultEvent.VALID);
				passwordMatchBool = passwordMatch();
				if(usernameValid &&
					firstNameValid &&
					lastNameValid &&
					passwordValid &&
					passwordMatchBool &&
					emailValid)
				{
					registerButton.enabled = true;
				}		
			}
		
			/**
			 * submit form to service call
			 * @private
			 */
			private function callZend():void{

				try{
					zendAMF.register(usernameInput.text, passwordInput.text, firstNameInput.text, lastNameInput.text, emailInput.text);
				}catch(e:TypeError){
					//typeError always thrown here
					//just ignore as it does not appear to affect
					//anything
				}
			}
			
			/**
			 * check to see if passwords match and set error string
			 * @private
			 * @return boolean - true if match false otherwise
			 */
			private function passwordMatch():Boolean{
				var match:Boolean = new Boolean();
				match = true;
				passwordAgainInput.errorString = "";
				if (passwordInput.text != passwordAgainInput.text){
					passwordAgainInput.errorString = Constant.PASSWORDS_DONT_MATCH;
					match = false;
				}
				return match;
			}

			
			/**
			 * reset form and send cancel event to parent
			 * @private
			 */
			private function cancel(button:String):void{
				resetForm();
				dispatchEvent(new RegisterHelperEvent(button));
			}
			
			/**
			 * null fields and error strings
			 * @private
			 */
			private function resetForm():void{
				usernameInput.text = "";
				firstNameInput.text = "";
				lastNameInput.text = "";
				passwordInput.text = "";
				passwordAgainInput.text = "";
				emailInput.text = "";
				
				usernameInput.errorString = "";
				firstNameInput.errorString = "";
				lastNameInput.errorString = "";
				passwordInput.errorString = "";
				passwordAgainInput.errorString = "";
				emailInput.errorString = "";
			}
			
			/**
			 * handle result from service call to register new user
			 * send result to parent
			 * @private
			 * @param result event as bool - true if registration succesful false otherwise
			 */
			private function onRegisterResult(event:ResultEvent):void{
				resetForm();
				if (event.result as Boolean){
					Alert.show(Constant.REGISTRATION_SUCCESS);
				}else{
					Alert.show(Constant.REGISTRATION_ERROR);
				}
				dispatchEvent(new RegisterHelperEvent(Constant.REGISTRATION_COMPLETE));	
			}
			
			/**
			 * alert on error from service call
			 * @private
			 */
			private function onError(err:FaultEvent):void {
				Alert.show(Constant.GENERAL_ERROR);
			}
			
			/**
			 * return from check if user is already registered
			 * exit on warning exists or check email already exists otherwise
			 * @private
			 * @param - boolean true if exists false otherwise
			 */
			private function userExistsHandler(event:ResultEvent):void{
				var exists:Boolean = event.result as Boolean;
				if (exists && usernameValidator.validate().type == ValidationResultEvent.VALID){
					usernameInput.text = "";
					registerButton.enabled = false;
					Alert.show("the user name is already registered");
				}else if(usernameValidator.validate().type == ValidationResultEvent.VALID){
					//user did not exist so check server for email
					emailRegistered();
				}
			}
			
			/**
			 * handle if email already registered
			 * exit on error if so or register user if not
			 * pre-condition - username must not already be registered
			 * @private
			 * @param ResultEvent bool- true if already registered false otherwise
			 */
			private function emailRegisteredHandler(event:ResultEvent):void{
				var registered:Boolean = event.result as Boolean;
				if(registered && mailValidator.validate().type == ValidationResultEvent.VALID){
					registerButton.enabled = false;
					emailInput.text = "";
					Alert.show("the email is already registered");
				}
				else if(mailValidator.validate().type == ValidationResultEvent.VALID){
					//email is valid so register new user
					registerButton.enabled = false;
					callZend();
				}
			}
			
			/**
			 * check to see if user is already registered
			 * @private
			 */
			private function userExists():void{
				zendAMF.userExists(usernameInput.text);
			}
			
			/**
			 * check to see if email is already registered
			 * @private
			 */
			private function emailRegistered():void{
				zendAMF.emailRegistered(emailInput.text);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:RemoteObject 
			id="zendAMF" 
			destination="zend" 
			showBusyCursor="true" 
			source="test_class">
			<mx:method 
				name="register" 
				result="onRegisterResult(event)"  
				fault="onError(event)">
				<mx:arguments>
					<user>
						{null}
					</user>
					<password>
						{null}
					</password>
					<firstname>
						{null}
					</firstname>
					<lastname>
						{null}
					</lastname>
					<email>
						{null}
					</email>
				</mx:arguments>
			</mx:method>
			<mx:method 
				name="userExists" 
				result="userExistsHandler(event)"  
				fault="onError(event)">
				<mx:arguments>
					<username>
						{null}
					</username>
				</mx:arguments>
			</mx:method>
			<mx:method 
				name="emailRegistered" 
				result="emailRegisteredHandler(event)"  
				fault="onError(event)">
				<mx:arguments>
					<email>
						{null}
					</email>
				</mx:arguments>
			</mx:method>
		</mx:RemoteObject>
	</fx:Declarations>
	
	<mx:Label text = "REGISTER" />
	<mx:Form id="registerForm">
		<mx:FormItem label = "username : ">
			<mx:TextInput 
					id="usernameInput" 
					change = "enableSubmit()" 
					restrict = "{Constant.ALPHANUMERIC_UNDERSCORE_REGEX}" />
		</mx:FormItem>
		<mx:FormItem label = "first name : ">
			<mx:TextInput 
					id="firstNameInput" 
					change = "enableSubmit()" 
					restrict = "{Constant.ALPHA_REGEX}" />
		</mx:FormItem>
		<mx:FormItem label = "last name : ">
			<mx:TextInput 
					id="lastNameInput" 
					change = "enableSubmit()" 
					restrict = "{Constant.ALPHA_REGEX}" />
		</mx:FormItem>
		<mx:FormItem label = "password : ">
			<mx:TextInput 
					id="passwordInput" 
					displayAsPassword="true" 
					change="enableSubmit()"/>
		</mx:FormItem>
		<mx:FormItem label = "repeat password : ">
			<mx:TextInput 
					id="passwordAgainInput" 
					displayAsPassword="true" 
					change="enableSubmit()"/>
		</mx:FormItem>
		<mx:FormItem label = "email : ">
			<mx:TextInput 
					id="emailInput" 
					change = "enableSubmit()" />
		</mx:FormItem>
	</mx:Form>
	<mx:HBox>
		<mx:Button 
				id = "registerButton" 
				label="register" 
				click = "userExists()"
				enabled = "false" />
		<mx:Button
				id = "cancelButton"
				label = "cancel"
				click = 'cancel(Constant.CANCEL_LINK)' />
	</mx:HBox>
	
</mx:VBox>
